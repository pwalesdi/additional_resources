{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Review Weeks 9 & 10 & 11\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 9 - Correlated Data "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### \"Rolling\" statistics through time, such as the rolling mean.\n",
    "- Rolling implies the idea of taking a moving range or window of values that is used for the calculation. \n",
    "- When applying a rolling statistic to say a time series dataset we may specify a time window, say 14 days, an perform the calculation for all possible window frames of 14 days.\n",
    "- Because we are not using the entirety of the dataset and only these windows, that stat is representative of the window in time **and** we make several calculations.\n",
    "    - **Window** indicates the number of days to include in the average.\n",
    "    - **Center** indicates whether the window should be centered on the date or use data prior to that date.\n",
    "    - **Freq** indicates which level to roll the averages up to (as used in resample): D for day, M for month, A for year, etc.\n",
    "- Lets think of an example.  \"Weekly rain fall volume\". This implies that we are measuring the rain fall of a 7 day period.  Additionally, this is a calculation that we're interested in measuring every day.  Because it is weekly, as days progress we can still only use the past 7 days for a calculation. \n",
    "\n",
    "**Rolling Total/AVG. Example Table**\n",
    "    \n",
    "| Date     | Rainfall | | Date     | Rainfall | | Date     | Rainfall | \n",
    "|:---------|----------|-|:---------|----------|-|:---------|----------|\n",
    "|Sept. 7   |  0       | |Sept. 8   | 0        ||Sept. 9   | 8.5      |\n",
    "|Sept. 6   | 1.5      ||Sept. 7   | 0        ||Sept. 8   | 0        |\n",
    "|Sept. 5   | 4        ||Sept. 6   | 1.5      ||Sept. 7   | 0        |\n",
    "|Sept. 4   | 0        ||Sept. 5   | 4        ||Sept. 6   | 1.5      |\n",
    "|Sept. 3   | 12       ||Sept. 4   | 0        ||Sept. 5   | 4        |\n",
    "|Sept. 2   | 0        ||Sept. 3   | 12       ||Sept. 4   | 0        |\n",
    "|Sept. 1   | 2.5      ||Sept. 2   | 0        ||Sept. 3   | 12       |\n",
    "|**Total** | **20**   ||**Total** | **17.5** ||**Total** | **26**   |\n",
    "|**Avg. ** | **2.85** ||**Avg. ** | **2.5**  ||**Avg. ** | **3.71** |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Autocorrelation and partial autocorrelation\n",
    "\n",
    "**Autocorrelation**\n",
    "- AutoCorrelation looks at how much an observation in a series is correlated with a later or earlier observation. \n",
    "- AutoCorrelation takes 1 parameter `K` or `Lag` which is the value you are trying to calculate the correlation with.  A lag of 7 units (if our units were days) would indicate the previous same day of the week.  Such as Saturday to the previous Saturday or Wednesday to the previous Wednesday.\n",
    "    - A k of 365 (if our units were days) would indicate that date exactly one year ago.  Think Christmas or Halloween.\n",
    "\n",
    "**Partial Autocorrelation**\n",
    "- The Autocorrelation is a calculation for point $A_1$ and point $A_{1-k}$ and does not consider, in its calculation, the effects of all the observations that occur between $A_{1-k}$ and $A_1$.\n",
    "- The Partial Autocorrelation will take into consideration these values during its calculation.\n",
    "- This attempts to account for the fact that nearer observations tend to be more similar\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot  as plt\n",
    "from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n",
    "%matplotlib inline\n",
    "\n",
    "bus = pd.read_csv(\"../data/bus.csv\")\n",
    "bus.set_index('date', inplace=True)\n",
    "\n",
    "bus.index = pd.date_range('1/1/1973', # start date\n",
    "                          periods = len(bus.index), # we want the number of periods to match the length of our index\n",
    "                          freq = 'M')\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (9, 5))\n",
    "plot_acf(bus['bus_ridership'], lags = 30, ax = ax)\n",
    "plt.show();\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (9, 5))\n",
    "plot_pacf(bus['bus_ridership'], lags = 30, ax = ax)\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Describe when autoregressive models and moving average models are appropriate.\n",
    "\n",
    "**AutoRegression (AR)**\n",
    "- The models use previous observations as predictors.\n",
    "- Autoregressive models are used for modeling Long Term trends **not** sudden fluctuations.\n",
    "- AR models have a parameter \"`p`\" which indicates the number or previous observations to consider when making a prediction.\n",
    "    - We can look at the Autocorrelation viz in order to identify a \"`p`\" value to use.\n",
    "\n",
    "**Moving Average(MA)**\n",
    "- Moving average (MA) models take previous error terms as inputs. They predict the next value based on deviations from previous predictions. \n",
    "- We want to use MA models when there are sudden fluctuations in our process.\n",
    "- MA models have a parameter \"`q`\" which indicates the number or previous observations to consider when making a prediction.\n",
    "\n",
    "\n",
    "### Define stationarity.\n",
    "- A time series with a constant mean over time.\n",
    "- Has an autocorrelation that only depends on lag $k$, not on time $t$.\n",
    "- If you visualized the data it would have no clear upward or downward trend.  \n",
    "    - It may even have a consistent trend of events.\n",
    "\n",
    "### Conduct and interpret a Dickey-Fuller test for stationarity.\n",
    "- We can utilize the Dickey-Fuller test to test for stationarity.\n",
    "- This test is similar to a t-test in it outputs a p-value.\n",
    "    - This Null Hypothesis is that the data is **Not Stationary**\n",
    "        - Large P values support this hypothesis.\n",
    "    - The Alternate Hypothesis is that the data **is Stationary**\n",
    "        - Small P values support this hypothesis.\n",
    "        \n",
    "### Construct integrated autoregressive moving average (ARIMA) models.\n",
    "- Combining/_integrating_ an AR and MA model results in an ARIMA Model.\n",
    "- Useful when we want to model _longer term data with sudden fluctuations._\n",
    "    - Not Stationary.\n",
    "\n",
    "\n",
    "### Identify the optimal values of parameters $p$, $d$, and $q$.\n",
    "\n",
    "- Given that the ARMA and ARIMA models are statsmodels, we can not use gridsearch, so we just have to for loop it after taking a good hard look at the ARC and PARC charts\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 10 Bayes\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Intro to Bayes\n",
    "\n",
    "**Recognize and describe the axioms and properties of probability.**\n",
    "\n",
    "- Axioms\n",
    "    - Non-Negativity\n",
    "        - For any event, $A$, the probability of the event must be greater than or equal to zero.\n",
    "        - Can't have a negative probability (lamens) \n",
    "        - $0 <= P(A)$\n",
    "    - Additivity\n",
    "        - For mutual exclusive events, $e$, the probability of any of the events occuring is equivalnet to the sum of their probabilites\n",
    "        - The union of all probability is equal to their sum\n",
    "- Properties\n",
    "    - Propability of no event\n",
    "        - equals zero\n",
    "    - joint probability\n",
    "        - P(A|B) = multiply the probability that  BB  happens by the probability that  AA  occurs if  BB  does\n",
    "        - basis for likelihood and prior in numerator of Bayes Theorem $P(B|A)P(B)$\n",
    "    - Conditional probability\n",
    "        - basis for posterior $P(A|B)$\n",
    "        - target in Bayes Theorem\n",
    "        - intersection of probability of two condtional events over all possibility of one of the events \n",
    "    - Law of total probability\n",
    "        - bowl of cookies\n",
    "        - to get overall combine probabilities from different intersections\n",
    "\n",
    "**Describe Bayes' theorem.**\n",
    "$$ P(A|B) = \\frac{P(B|A)\\;P(A)}{P(B)} $$\n",
    "\n",
    "\n",
    "\n",
    "**Explain the diachronic interpretation of Bayes' theorem.**\n",
    "- The Prior $P(A)$\n",
    "    - The prior is our belief in the model given no additional information.\n",
    "- The Likelihood $P(B|A)$\n",
    "    - The likelihood is the probability of the data we observed occurring given the model\n",
    "    - Will influence our Prior\n",
    "- The Posterior $P(A|B)$\n",
    "    - Conditional probability\n",
    "    - What we are lloking for\n",
    "- The Marginal Probability $P(B)$\n",
    "    - data is the probability that our data are observed regardless of what model\n",
    "    - total probability where our event occurred\n",
    "\n",
    "**Solve some Bayesian statistics problems.**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- P(has|with)\n",
    "- P(have|with)\n",
    "- P(has|given)\n",
    "- P(have|given)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bayes Inference\n",
    "\n",
    "**Describe the relationships among parameter, statistic, sample, and\n",
    "population.**\n",
    " - Population -> Sample -> Statistic -> Parameters\n",
    " - _population_: All observation\n",
    " - _sample_: subsection of the population\n",
    " - _statistics_: calculated from the sample\n",
    " - _parameters_: inferes to the entire population\n",
    "\n",
    "**Understand how Bayes’ Theorem connects to Bayesian inference.**\n",
    "- Bayes Theorem allows us to apply to distribution and connect prior knowledge\n",
    "- continued iteriate process for inference\n",
    "\n",
    "\n",
    "**Describe the posterior distribution.**\n",
    "- Combination of our data and our prior \n",
    "- describes the combination of your priors and evidence(likliehood)\n",
    "- likelihood relates y to your $f(\\theta)$\n",
    "- $f(\\theta | y)$\n",
    "-\n",
    "\n",
    "**Identify methods for choosing a prior and a likelihood.**\n",
    "\n",
    "- conjugacy between your prior and likelihood\n",
    "- likelihood dist should only influence the posterior , develop prior first and then add likelihood\n",
    "\n",
    "**Understand how simulations play such a large role in Bayesian inference.**\n",
    "\n",
    "- conjugacy is limiting, using simulation allows use to use more complicated distribution combinations\n",
    "- computer powers allow more complex problems"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MCMC\n",
    "\n",
    "**Identify the Markov property.**\n",
    "- __Markov chains__: how a random variable changes from one state to another\n",
    "- __Markov Property__: if i know what is happening at time t, i know just as much about what will happen at t+1, without having to back to t=1.\n",
    "\n",
    "**Describe Monte Carlo simulations.**\n",
    "- powerful way to model complex systems by generating random numbers\n",
    "\n",
    "**Describe how MCMC works.**\n",
    "- MCMC is a method that can find the posterior distribution of our parameter of interest. Specifically, this type of algorithm generates Monte Carlo simulations in a way that relies on the Markov property, then accepts these simulations at a certain rate to get the posterior distribution.\n",
    "\n",
    "- Monte Carlo Methods\n",
    "    - large random sampling process to generate numerical results \n",
    "- Markov Chains\n",
    "    - when we sample random numbers, we're going to rely on the previous random number to help randomly generate the next one\n",
    "- Acceptance Rejection Sampling\n",
    "    - specific type of Monte Carlo\n",
    "    - decide to keep or discard it \n",
    "    - Keeps in going in the right direction\n",
    "\n",
    "**Identify situations where MCMC is beneficial.**\n",
    "- helpful in cases when we don't have conjugate priors/posteriors\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Maximum Likelihood\n",
    "\n",
    "**Understand the Beta Distribution**\n",
    "- distribution of probabilites, binary choice and their probabilities\n",
    "\n",
    "**Describe the concept of \"conjugacy\" and \"conjugate priors\" in Bayesian statistics**\n",
    "- conjugate priors are the linked distribution that allow simple calculations\n",
    "\n",
    "**Set up an example of the Beta-Binomial model using a midterm election example**\n",
    "- in notebook\n",
    "\n",
    "**Calculate the Maximum Likelihood Estimate**\n",
    "- highest point in the posterior distribution\n",
    "\n",
    "**Use the Beta-Binomial model to build our example in a Bayesian framework**\n",
    "- combining a beta prior with a binomial likelihood can generate a beta posterior within Bayesian terms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 11 Neural Networks "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Intro to Neural Networks + Keras \n",
    "\n",
    "\n",
    "### Differentiate between single layer and multi-layer perceptrons\n",
    "- **Single Layer's** have no hidden layer, just input features and a single activation function with an output which can be interpreted as the prediction. Just like the way most models we have talked about work.\n",
    "- **Multi Layer's** have 1 or more hidden layers where data is transformed and new interaction terms are created to be used to predict the output or feed into additional layers.\n",
    "\n",
    "### Define epoch, learning rate, activation function, hidden layer, neuron, weights & bias terms.\n",
    "- **Epoch : ** When our full set of training data fully forward and back propagates through our network. \n",
    "    - Feed the data through the network.\n",
    "    - Calculate the errors.\n",
    "    - Propagate backwards to adjust network to better fit the data via found errors.\n",
    "- **Hidden Layer :** 1 or more neurons that sit in-between our input layer (original features) and our output layer (predictive function) that are responsible for transforming the data.\n",
    "- **Weights : ** Values applied to features as they flow through the network to contribute to interaction.  Weights are randomly initialized and adjusted according to gradient decent on our loss function.  The weights function similar to coefficients in a linear or logistic regression in which the weights multiply the original value in order to affect how much each feature contributes to the interaction term that results from the activation function.\n",
    "- **Bias Terms : ** Constant values that are added in to each neuron.  These are also adjusted the same way the weights are, however they exist on their own and do not _weight_ any other value.\n",
    "- **Activation Function : ** A function on the neuron that takes in the sum of all features after their weights have been applied plus the Bias term and returns a new value that will be used as a feature in the next layer.\n",
    "- **Neuron : ** Neurons are the weights, bias term and activation function.  NNs can have various hidden layers and each hidden layer can have various neurons.  Each neuron has their own unique set of weights and bias term and potentially unique activation function in order to arrive at a single value that represents some kind of combination of all the fed in features.\n",
    "- **Learning Rate : ** How large the steps are that we take when moving through our loss function in order to increase/decrease weights in order to decrease total loss. (Same as gradient Descent)\n",
    "\n",
    "\n",
    "- **Batch :** Often we can not forward then back propagate our entire dataset at once so we divide it up into batches to flow through chunk by chunk\n",
    "- **Iteration :**The process of a single batch flowing forward and backward through the network.\n",
    "\n",
    "\n",
    "### Define Forward and Back Propagation.\n",
    "\n",
    "**Forward propagation** is the process of data flowing through the network in order to arrive at a predicted value.  \n",
    "**Backward Propagation** is the act of optimizing a network be working backwards through it, starting with the errors calculate and identifying the points in the network (weights or nodes) that are contributing most to the error and adjusting them accordingly."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Optimizing Neural Networks & Convolutional Neural Networks\n",
    "\n",
    "\n",
    "\n",
    "### Explain how L1/L2, dropout, and early stopping regularization work and implement these methods in Keras\n",
    "\n",
    "**Regularization**\n",
    "- Incorporating either LASSO or Ridge regularization into back propagation is as simple as adding the regularization term to the loss function (ok, not very simple at all when you look at the math)\n",
    "- L1 typically isn't used in NNs.\n",
    "- L2 is much more popular and sometimes referred to as \"weight decay\". \n",
    "\n",
    "**Dropout**\n",
    "- The process of randomly removing nodes in training epochs to see how it affects the model.  A NN with densly connected layers will have the tendency to overfit so we can utilize drop out in order better understand if nodes should be removed or kept.  (Similar to how Random Forests reduce variance and overfitting.)\n",
    "- Dropouts can occur at any epoch and the models \"constant fear\" of loosing a node at any time prevents the over adjustment of a weight for an epoch.\n",
    "\n",
    "**Early Stopping**\n",
    "- Compares how much the loss function is changes and stops the algorithm once it hits the point where the loss function starts to go up.  This is done with the assumption that the first minimum that was hit it the global minimum. \n",
    "\n",
    "### Describe Gradient Descent with Momentum and Data Augmentation\n",
    "\n",
    "**Gradient Descent with Momentum\n",
    "\n",
    "**Data Augmentation**\n",
    "- Generating more data from existing data.  With pictures this can be the result of transposing, rotating or reflecting and image to create a new version of it.  In addition SMOTE can be used to generate more similar observations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Identify use cases of Convolutional Neural Networks.\n",
    "- Convolutional NNs consider features related to one another via proximity, this makes them great for assessing pictures because they are able to break down a picture the way humans do, by focusing one specific areas of the photo.\n",
    "\n",
    "### Understand how edge detection works in CNNs\n",
    "- An edge is identified by discontinuity in an image typically in color.  \n",
    "- When we pass our weights window over a panel of data in a picture we transform and map the image into smaller dimensions. \n",
    "- Our Window will have conflicting/balanced weights on each side of it, one side very positive and one side very negative. If there is a significant difference in color/greyscale (what we would interpret as a edge). When the window passes over it, the weights applied on each side of the window will no longer neutral out and instead result in a significant positive or negative value indicating there is a drastic difference in shading from one side of the window to another.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Edge Detection**\n",
    "\n",
    "Lets say we have a 5 by 1 image and a window size that is 2 by 1 that we're going to move across out image. _below_.\n",
    "\n",
    "It doesn't matter what value we assign to the pixels as long as different colors are represented by different values. Lets assign a value of `-1` to white and `1` to black.  Our window weights will be `10` and `-10`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAASgAAABICAYAAABFhGj3AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAABuElEQVR4nO3aMU7DQBCG0RlElxZq2vTxmXIozhR3HIMLUC0NFQJBBMY/q/e6rKxoRpE+aSP3GKMAEt3sPQDAZwQKiCVQQCyBAmIJFBBLoIBYt1890N3nqjpXVR0Oh9PxeNx8KLaxruveI2zmdDrtPQI/sK7r8xjj/v15X/Me1LIs43K5/Opg/J3u3nuEzXif73/r7nWMsbw/d8UDYgkUEEuggFgCBcQSKCCWQAGxBAqIJVBALIECYgkUEEuggFgCBcQSKCCWQAGxBAqIJVBALIECYgkUEEuggFgCBcQSKCCWQAGxBAqIJVBALIECYgkUEEuggFgCBcQSKCCWQAGxBAqIJVBALIECYgkUEEuggFgCBcQSKCCWQAGxBAqIJVBALIECYgkUEEuggFgCBcQSKCCWQAGxBAqIJVBALIECYgkUEEuggFgCBcS6/eqB7j5X1fnt40t3P2070q7uqup57yE2MvNu1d1T71eT/35V9fDRYY8xvv0N3X0ZYyy/NlKYmfebebcq+83KFQ+IJVBArGsD9bjJFDlm3m/m3arsN6Wr/oMC+EuueEAsgQJiCRQQS6CAWAIFxHoFj5VASBr9K8gAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 360x72 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "sns.palplot(sns.color_palette(['#FFFFFF','#FFFFFF', '#000000','#FFFFFF','#FFFFFF']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "w = np.array([10,-10])\n",
    "\n",
    "# first frame is a white block then another white block\n",
    "f1 = np.array([-1,-1])\n",
    "# second frame is white block then a black block\n",
    "f2 = np.array([-1, 1])\n",
    "# third frame is a black block then a white block\n",
    "f3 = np.array([ 1,-1])\n",
    "f4 = np.array([-1,-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# frame one has no differences in it thus is sums to zero\n",
    "sum(f1*w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-20"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# frame two HAS differences in it, thus its sum is far away from zero\n",
    "sum(f2*w)\n",
    "# its a negative value because its a light to dark transition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# frame three HAS differences in it, thus its sum is far away from zero\n",
    "sum(f3*w)\n",
    "# its a positive value because its a dark to light transition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# frame four has no differences in it thus is sums to zero\n",
    "sum(f4*w)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define and describe \"padding\" and \"strided\" convolutions.\n",
    "- **Padding :** Given that the way edges flow over a picture an aspect of padding can be added.  This is essentially adding boarding cells of neutral values around a picture so that pixels that are in corners or along edges can be considered more often\n",
    "    - In the event there is something important in the corner of an image, without having padding that corner may only be considered once.\n",
    "    - Typically we as humans gravitate our focus towards the center of an image and work outward, they further away from the center objects are in a picture the less we notice them, think about what happens in the corners of pictures.  Its typically not a place you consciously look at when looking at a picture, padding tries to combat NNs from picking up on this same habit.\n",
    "\n",
    "- **Strides :** Stride values determines how many units our window will shift as it flows through the image. \n",
    "    - If a stride is set to 1, then between each window iteration the window will move 1 unit (1 pixel)\n",
    "    - If a stride is set to 2, then the window will shift over 2 units (2 pixels).\n",
    "    \n",
    "### Understand how convolutions operate on volumes.\n",
    "- Volume in terms of a CNN are the aspect of dividing our original image up into several versions.  Typical case is dividing a color image up into three images 1 to represent the Red coloring, 1 to represent the Green coloring, and 1 to represent the Blue coloring (this is done with the RGB color spectrum)\n",
    "- Each color layer will have its own weight window applied to it, after that the results of all 3 weight windows * values will be aggregated into a single matrix.\n",
    "\n",
    "### Define pooling and implement max pooling.\n",
    "- Pooling layers allow us to compress output from the convolution layers.\n",
    "    - Max Pooling is typically the tactic used in the pooling layer.  This identifies and takes the strongest/most important info for retention.  \n",
    "    - Pooling is done independently across channels.  (Each \"node\" has its own unique pooling)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
